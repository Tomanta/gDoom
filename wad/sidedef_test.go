package wad

import (
	"reflect"
	"testing"
)

func TestNewSidedefssFromBytes(t *testing.T) {
	t.Run("returns error if buffer wrong length", func(t *testing.T) {
		data := []byte{
			0x00, 0x00,
			0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x44, 0x4F, 0x4F, 0x52, 0x33, 0x00, 0x00, 0x00,
		}
		var numSidedefs int32 = 2
		_, err := NewSidedefsFromBytes(data, numSidedefs)
		if err == nil {
			t.Fatalf("did not receive expected error")
		}
	})

	t.Run("returns correct information", func(t *testing.T) {
		data := []byte{
			0x00, 0x00,
			0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x44, 0x4F, 0x4F, 0x52, 0x33, 0x00, 0x00, 0x00,
			0x01, 0x00,
			0x04, 0x00,
			0x02, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x4C, 0x49, 0x54, 0x45, 0x33, 0x00, 0x00, 0x00,
			0x05, 0x00,
		}
		var numSidedefs int32 = 2
		want := []Sidedef{
			{
				TextureOffsetX: 0,
				TextureOffsetY: 0,
				SectorID:       1,
				UpperTexture:   "-",
				LowerTexture:   "-",
				MiddleTexture:  "DOOR3",
			}, {
				TextureOffsetX: 4,
				TextureOffsetY: 2,
				SectorID:       5,
				UpperTexture:   "-",
				LowerTexture:   "-",
				MiddleTexture:  "LITE3",
			},
		}
		got, err := NewSidedefsFromBytes(data, numSidedefs)
		if err != nil {
			t.Fatalf("could not read sidedefs: %v", err)
		}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("wanted %v, got %v", want, got)
		}

	})
}
